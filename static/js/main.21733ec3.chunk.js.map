{"version":3,"sources":["scripts/PlayJSON.js","components/SheetMusic.js","components/PlayButton.js","pages/MainPage.js","pages/StartPage.js","pages/ComparePage.js","scripts/RouterHelper.js","App.js","serviceWorker.js","index.js"],"names":["PlayJSON","notes","callback","arguments","length","undefined","synth","Tone","Synth","toMaster","Transport","stop","cancel","triggerSynth","note","time","triggerAttackRelease","console","log","noteToString","currentTime","forEach","scheduleOnce","relative_value","parseFloat","Time","duration","JSONtoAudio","start","-7","-6","-5","-4","-3","-2","-1","0","1","2","3","4","5","6","7","SheetMusic","state","hovernote","getHoverArray","_this","props","concat","Object","toConsumableArray","selectedDuration","_this2","this","svg","Snap","keyId","toString","load","e","q","h","w","clear","note_shapes","select","rect","width","height","attr","fill","stroke","strokeWidth","drawLine","editable","i","drawBoundingBox","drawNotes","lo_shape","lo_notes","_this3","num","drawNote","no","x","lineHeight","y","C_position","shapey","clone","transform","pointerEvents","append","comparison","ellipse","correct","drawLedgerLines","line","calculateLineHeight","marginX","noteval","_this4","bb","g","group","mousedown","addNote","hover","setState","svgRender","idKey","react_default","a","createElement","className","style","id","React","Component","defaultProps","PlayButton","playing","play","emitStop","music","emit","listener","addListener","playOnLoad","onClick","EmitPlayButton","Emitter","MainPage","loading","first_time","redirect","actual_song","user_song","selected_duration","undo","slice","setDuration","submit","setPost","user","actual","axios","get","then","response","data","songdata","localStorage","getItem","setItem","react_router","to","components_SheetMusic","window","innerWidth","innerHeight","StartPage","react_router_dom","ComparePage","redirect_home","redirect_main","corrected_song","getAmtCorrect","filter","getTotal","handlePlayAgain","handleBackToStart","getPct","Math","floor","hasPost","post","popPost","corrected","catch","error","PropsRoute","_ref","component","rest","objectWithoutProperties","assign","render","routeProps","_len","Array","_key","finalProps","apply","renderMergedProps","App","post_object","has_post","song","tmp","exact","path","RouterHelper","EmitterApp","App_App","EmitterProvider","Boolean","location","hostname","match","src_App","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21733ec3.chunk.js","sourcesContent":["import Tone from 'tone';\n\n// Takes in JSON representing a linear list of notes and plays them in order\nexport function PlayJSON(notes, callback=() => {}) {\n  var synth = new Tone.Synth().toMaster();\n  Tone.Transport.stop();\n  Tone.Transport.cancel();\n  JSONtoAudio(notes, synth, callback);\n  Tone.Transport.start();\n}\n\nexport function StopJSON() {\n  Tone.Transport.stop();\n}\n\nfunction JSONtoAudio(notes, synth, callback) {\n  function triggerSynth(note) {\n\t   return (time) => synth.triggerAttackRelease(noteToString(note), '8n')\n  }\n  var currentTime = 0.0\n  notes.forEach((note) => {\n    Tone.Transport.scheduleOnce(triggerSynth(note.relative_value),\n     parseFloat((currentTime) * Tone.Time('1m')))\n    currentTime += note.duration\n  })\n  Tone.Transport.scheduleOnce(callback,\n   parseFloat((currentTime) * Tone.Time('1m')))\n}\n\nfunction noteToString(note) {\n  console.log(notes[note])\n  return notes[note]\n}\n\nlet notes = {\n  '-7': \"C4\",\n  '-6' : \"D4\",\n  '-5' : \"E4\",\n  '-4' : \"F4\",\n  '-3' : \"G4\",\n  '-2' : \"A4\",\n  '-1' : \"B4\",\n  0 : \"C5\",\n  1 : \"D5\",\n  2 : \"E5\",\n  3 : \"F5\",\n  4 : \"G5\",\n  5 : \"A5\",\n  6 : \"B5\",\n  7 : \"C6\"\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Snap from \"snapsvg-cjs\";\n\nclass SheetMusic extends React.Component {\n  state = {\n    hovernote: null\n  };\n\n  svgRender() {\n    let svg = Snap(\"#svg\" + this.props.keyId.toString());\n    // NOTE: This method seems kind of clunky...\n    Snap.load(\"http://127.0.0.1:5000/resources/stem_up/eighth_note.svg\", e => {\n      Snap.load(\n        \"http://127.0.0.1:5000/resources/stem_up/quarter_note.svg\",\n        q => {\n          Snap.load(\n            \"http://127.0.0.1:5000/resources/stem_up/half_note.svg\",\n            h => {\n              Snap.load(\"http://127.0.0.1:5000/resources/whole_note.svg\", w => {\n                svg.clear();\n                let eg = e.select(\"g\");\n                let qg = q.select(\"g\");\n                let hg = h.select(\"g\");\n                let wg = w.select(\"g\");\n                const note_shapes = [eg, qg, hg, wg];\n                svg.rect(0, 0, this.props.width, this.props.height).attr({\n                  fill: \"#FFF\",\n                  stroke: \"#000\",\n                  strokeWidth: \"5\"\n                });\n                this.drawLine(0, svg);\n                this.drawLine(1, svg);\n                this.drawLine(2, svg);\n                this.drawLine(3, svg);\n                this.drawLine(4, svg);\n                if (this.props.editable) {\n                  for (var i = -7; i <= 7; i++) {\n                    this.drawBoundingBox(1.25 + i * -0.5, i, svg);\n                  }\n                }\n                this.drawNotes(svg, note_shapes, this.getHoverArray());\n              });\n            }\n          );\n        }\n      );\n    });\n  }\n\n  getHoverArray = () => {\n    if (this.state.hovernote === null) {\n      return this.props.notes;\n    } else {\n      return [\n        ...this.props.notes,\n        {\n          relative_value: this.state.hovernote,\n          duration: this.props.selectedDuration\n        }\n      ];\n    }\n  };\n\n  // Draws all the notes onto the lines\n  drawNotes(svg, lo_shape, lo_notes) {\n    var num = 0;\n    lo_notes.forEach(note => {\n      this.drawNote(svg, lo_shape, num, note);\n      num += 1;\n    });\n  }\n\n  // Draws a note onto the page given a position and a duration\n  drawNote(svg, lo_shape, no, note) {\n    const x = 100 + no * this.lineHeight() * 2;\n    const y = this.C_position() - note.relative_value * (this.lineHeight() / 2);\n    var shapey = null;\n    switch (note.duration) {\n      case 0.125:\n        shapey = lo_shape[0].clone();\n        break;\n      case 0.25:\n        shapey = lo_shape[1].clone();\n        break;\n      case 0.5:\n        shapey = lo_shape[2].clone();\n        break;\n      case 1:\n        shapey = lo_shape[3].clone();\n        break;\n      default:\n        break;\n    }\n    shapey.attr({\n      transform: `translate(${x}, ${y})`,\n      pointerEvents: \"none\",\n      fill: \"rgb(3,100,3)\"\n    });\n    svg.append(shapey);\n    if (this.props.comparison) {\n      svg.ellipse(x, 30, 6, 6).attr({\n        fill: note.correct ? \"#4ED81A\" : \"#FF336E\"\n      });\n    }\n    this.drawLedgerLines(svg, no, note);\n  }\n\n  //TODO: this can be abstracted.\n  // Draws the ledger lines depending on the value of the note\n  drawLedgerLines(svg, no, note) {\n    const x = 100 + no * this.lineHeight() * 2;\n    if (note.relative_value < -6) {\n      svg\n        .line(\n          x - 15,\n          this.calculateLineHeight(5),\n          x + 15,\n          this.calculateLineHeight(5)\n        )\n        .attr({\n          stroke: \"#000\",\n          strokeWidth: \"2\"\n        });\n    }\n    if (note.relative_value > 4) {\n      svg\n        .line(\n          x - 15,\n          this.calculateLineHeight(-1),\n          x + 15,\n          this.calculateLineHeight(-1)\n        )\n        .attr({\n          stroke: \"#000\",\n          strokeWidth: \"2\"\n        });\n    }\n    if (note.relative_value > 6) {\n      svg\n        .line(\n          x - 15,\n          this.calculateLineHeight(-2),\n          x + 15,\n          this.calculateLineHeight(-2)\n        )\n        .attr({\n          stroke: \"#000\",\n          strokeWidth: \"2\"\n        });\n    }\n  }\n\n  // Draws the lines representing the lines of the sheet music\n  drawLine(no, svg) {\n    svg\n      .line(\n        this.props.marginX,\n        this.calculateLineHeight(no),\n        this.props.width - this.props.marginX,\n        this.calculateLineHeight(no)\n      )\n      .attr({\n        stroke: \"#000\",\n        strokeWidth: \"2\"\n      });\n  }\n\n  // TODO: empty note on dehover\n  // Draws the bounding boxes for placing notes\n  drawBoundingBox(no, noteval, svg) {\n    const bb = svg\n      .rect(\n        this.props.marginX,\n        this.calculateLineHeight(no),\n        this.props.width - this.props.marginX * 2,\n        this.lineHeight() / 2\n      )\n      .attr({\n        fill: \"rgba(50,50,50,.0)\"\n      });\n    const g = svg.group(bb);\n    g.mousedown(() => {\n      this.props.addNote(noteval);\n    });\n    g.hover(\n      () => {\n        this.setState({hovernote: noteval});\n      },\n      () => {\n        this.setState({hovernote: null});\n      }\n    );\n  }\n\n  // The height or distance between each line on the sheet music\n  lineHeight() {\n    return this.props.height / 20;\n  }\n\n  // The absolute position of an individual line\n  calculateLineHeight(no) {\n    return no * this.lineHeight() + this.props.height / 2.75;\n  }\n\n  // The position of the C note\n  C_position() {\n    return this.calculateLineHeight(3) - (3 * this.lineHeight()) / 2;\n  }\n\n  componentDidMount() {\n    this.svgRender();\n  }\n\n  componentDidUpdate() {\n    this.svgRender();\n  }\n\n  render() {\n    const idKey = \"svg\" + this.props.keyId.toString();\n    return (\n      <svg\n        className=\"sheetmusic\"\n        style={this.props.style}\n        width={this.props.width}\n        height={this.props.height}\n        id={idKey}\n      />\n    );\n  }\n}\n\nSheetMusic.propTypes = {\n  keyId: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  marginX: PropTypes.number,\n  notes: PropTypes.array.isRequired,\n  editable: PropTypes.bool,\n  comparison: PropTypes.bool,\n  addNote: (props, propName, componentName) => {\n    if (\n      props[\"editable\"] === true &&\n      (props[propName] === undefined || typeof props[propName] != \"function\")\n    ) {\n      return new Error(\"addNote is required if the sheet music is editable!\");\n    }\n  },\n  selectedDuration: (props, propName, componentName) => {\n    if (\n      props[\"editable\"] === true &&\n      (props[propName] === undefined || typeof props[propName] != \"number\")\n    ) {\n      return new Error(\n        \"The select duration is required if the sheet music is editable!\"\n      );\n    }\n  }\n};\n\nSheetMusic.defaultProps = {\n  marginX: 30,\n  editable: true,\n  comparison: false\n};\n\nexport default SheetMusic;\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {Emitter} from 'react-emitter'\nimport {PlayJSON, StopJSON} from \"../scripts/PlayJSON\";\n\n// The component used to play audio with\nclass PlayButton extends React.Component {\n  state = {\n    playing: false\n  }\n\n  componentDidMount() {\n    this.listener = this.props.addListener('stop', () => {\n      this.setState({\n        playing: false\n      })\n    })\n    if(this.props.playOnLoad) {\n      this.play()\n    }\n  }\n\n  play = () => {\n    this.emitStop();\n    this.setState({\n      playing: true\n    })\n    PlayJSON(this.props.music, () => {this.emitStop()})\n  }\n\n  stop = () => {\n    this.emitStop();\n    StopJSON();\n  }\n\n  emitStop = () => {\n    this.props.emit('stop')\n  }\n\n  render() {\n    return (\n      <button className=\"red\" onClick={this.state.playing ? this.stop : this.play}>\n        {this.state.playing ? \"Pause\" : \"Play\"}\n      </button>\n    )\n  }\n}\n\nPlayButton.propTypes = {\n  music: PropTypes.arrayOf(PropTypes.object).isRequired,\n  playOnLoad: PropTypes.bool\n}\n\nPlayButton.defaultProps = {\n  playOnLoad: false\n}\n\nexport const EmitPlayButton = Emitter(PlayButton)\n\nexport default Emitter(PlayButton)\n","import React from \"react\";\nimport Tone from \"tone\";\nimport axios from \"axios\";\n\nimport {PlayJSON} from \"../scripts/PlayJSON\";\nimport SheetMusic from \"../components/SheetMusic\";\n//import Button from \"../components/Button\";\nimport {Redirect} from \"react-router-dom\";\nimport {EmitPlayButton} from \"../components/PlayButton\"\nimport \"./MainPage.css\";\n\n// The main page where the user listens to the song and attempts to transcribe it.\nclass MainPage extends React.Component {\n  /*\n    loading: whether the data is still being fetched from the server\n    first_time: whether this is the first time the user has used this page\n    redirect: whether the page should redirect to comparison\n    actual_song: the song that the user is transcribing\n    user_song: the user's inputted song\n    selected_duration: what the currently selected note duration is\n  */\n  state = {\n    loading: true,\n    first_time: false,\n    redirect: false,\n    actual_song: [],\n    user_song: [],\n    selected_duration: 0.25\n  };\n\n  // calls the python API\n  componentDidMount() {\n    axios.get(\"http://127.0.0.1:5000/api/get\")\n      .then(response => {\n        return response.data\n      })\n      .then(songdata => {\n        this.setState({\n          actual_song: songdata.notes,\n          user_song: [songdata.notes[0]],\n          loading: false\n        });\n      });\n      if(localStorage.getItem(\"first_time\") === null) {\n        localStorage.setItem(\"first_time\", false)\n        this.setState({\n          first_time: true\n        })\n      }\n  }\n\n  // Adds the note to the user_song state given the relative_value supplied by\n  // SheetMusic and the preselected duration\n  addNote = noteval => {\n    this.setState({\n      user_song: this.state.user_song.concat({\n        relative_value: noteval,\n        duration: this.state.selected_duration\n      })\n    });\n  };\n\n  // Removes the last element added\n  undo = () => {\n    this.setState({\n      user_song: this.state.user_song.slice(0, -1)\n    });\n  };\n\n  // Sets the duration\n  setDuration = duration => {\n    this.setState({\n      selected_duration: duration\n    });\n  };\n\n  // Sets the post data and then redirects the user to the comparison page\n  submit = () => {\n    this.props.setPost({\n      user: this.state.user_song,\n      actual: this.state.actual_song\n    });\n    this.setState({\n      redirect: true\n    });\n    Tone.Transport.stop();\n  };\n\n  render() {\n    if (this.state.redirect) {\n      return <Redirect to=\"/compare\" />;\n    }\n    if (this.state.loading) {\n      return null;\n    }\n    return (\n      <div className=\"pt-3\">\n        <div className=\"flexbar mt-3 mb-2\">\n          <h2 className=\"font-weight-bold m-0\">Transcriboid</h2>\n          <div className=\"d-flex align-items-end\">\n            {this.state.first_time && <p className=\"my-0 mx-2 text-muted font-weight-bold\">click here to play the song.</p>}\n            <EmitPlayButton music={this.state.actual_song} />\n          </div>\n        </div>\n        <SheetMusic\n          keyId={1}\n          width={window.innerWidth - 10 * 2}\n          height={window.innerHeight / 2}\n          marginX={40}\n          addNote={this.addNote}\n          notes={this.state.user_song}\n          selectedDuration={this.state.selected_duration}\n        />\n      <div className=\"flexbar my-2\">\n          <div>\n            <button className=\"medium thin\" onClick={() => this.setDuration(0.125)}>Eighth</button>\n            <button className=\"medium thin\" onClick={() => this.setDuration(0.25)}>Quarter</button>\n            <button className=\"medium thin\" onClick={() => this.setDuration(0.5)}>Half</button>\n            <button className=\"medium thin\" onClick={() => this.setDuration(1)}>Whole</button>\n          </div>\n          <div>\n            <button className=\"medium thin red\" onClick={this.undo}>\n              Undo\n            </button>\n            <button className=\"medium thin red\" onClick={this.submit}>\n              Submit\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./Page.css\";\nimport \"./StartPage.css\";\n\n// The initial page that the user sees when they load the website\nclass StartPage extends React.Component {\n  render() {\n    return (\n      <div id=\"main\">\n          <div>\n          <h1 className=\"font-weight-bold\">Transcriboid</h1>\n          <p className=\"m-0 text-center font-weight-normal\">A randomly generated transcription trainer.</p>\n          </div>\n          <Link to=\"/main\">\n            <button className=\"large\">Start</button>\n          </Link>\n        <p className=\"madetag\">Made by Ethan Leba, 2019</p>\n      </div>\n    );\n  }\n}\n\nexport default StartPage;\n","import React from \"react\";\nimport Tone from \"tone\";\nimport axios from \"axios\";\nimport {Redirect} from \"react-router-dom\";\n\nimport SheetMusic from \"../components/SheetMusic\";\nimport {PlayJSON} from \"../scripts/PlayJSON\";\nimport {EmitPlayButton} from \"../components/PlayButton\";\n\n// The page where the user sees the comparison between their input and the actual song\nclass ComparePage extends React.Component {\n  /*\n  loading: whether the page is still asking for data from the server or not\n  redirect_home: whether the page should prepare to redirect to the home page\n  redirect_main: whether the page should prepare to redirect to the main page\n  actual_song: the note data on the song generated by the site\n  corrected_song: the note data on the user input corrected\n  */\n  state = {\n    loading: true,\n    redirect_home: false,\n    redirect_main: false, // TODO: can be refactored out\n    actual_song: [],\n    corrected_song: []\n  };\n\n  componentDidMount() {\n    //Sends in the data to check if the user input is correct\n    if (!this.props.hasPost()) {\n      this.setState({\n        redirect_home: true\n      });\n    } else {\n      axios\n        .post(\"api/compare\", this.props.popPost())\n        .then(response => {\n          this.setState({\n            actual_song: response.data.actual,\n            corrected_song: response.data.corrected,\n            loading: false\n          });\n          console.log(response);\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    }\n  }\n\n  // Returns the amount of notes correct that the user inputted\n  getAmtCorrect = () => {\n    return this.state.corrected_song.filter(note => note.correct).length;\n  };\n\n  // Returns the total number of notes\n  getTotal = () => {\n    return this.state.actual_song.length;\n  };\n\n  // Redirects to main\n  handlePlayAgain = () => {\n    Tone.Transport.stop();\n    this.setState({\n      redirect_main: true\n    });\n  };\n\n  // Redirects home\n  handleBackToStart = () => {\n    Tone.Transport.stop();\n    this.setState({\n      redirect_home: true\n    });\n  };\n\n  getPct = () => {\n    return Math.floor((this.getAmtCorrect() / this.getTotal()) * 100);\n  };\n  render() {\n    if (this.state.redirect_home) {\n      return <Redirect to=\"/\" />;\n    }\n    if (this.state.redirect_main) {\n      return <Redirect to=\"/main\" />;\n    }\n    if (this.state.loading) {\n      return null;\n    }\n    return (\n      <div className=\"h-100 row align-items-center\">\n        <div className=\"col\">\n        <div className=\"flexbar my-2\">\n          <h3 className=\"m-0 font-weight-bold\">Actual Transcription</h3>\n          <EmitPlayButton music={this.state.actual_song} />\n        </div>\n        <SheetMusic\n          keyId={1}\n          width={window.innerWidth - 10 * 2}\n          height={window.innerHeight / 3}\n          notes={this.state.actual_song}\n          editable={false}\n        />\n        <div className=\"flexbar my-2\">\n          <h3 className=\"m-0 font-weight-bold\">Your Transcription ({this.getPct()}% correct)</h3>\n          <EmitPlayButton music={this.state.corrected_song} />\n        </div>\n        <SheetMusic\n          keyId={2}\n          width={window.innerWidth - 10 * 2}\n          height={window.innerHeight / 3}\n          notes={this.state.corrected_song}\n          editable={false}\n          comparison={true}\n        />\n      <div className=\"flexbar flexcenter my-2\">\n        <button className=\"medium\" onClick={this.handleBackToStart}>Quit</button>\n        <button className=\"medium red\" onClick={this.handlePlayAgain} >Try again</button>\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ComparePage;\n","import React from 'react'\nimport { Route } from 'react-router-dom'\n\nconst renderMergedProps = (component, ...rest) => {\n  const finalProps = Object.assign({}, ...rest);\n  return (\n    React.createElement(component, finalProps)\n  );\n}\n\nconst PropsRoute = ({ component, ...rest }) => {\n  return (\n    <Route {...rest} render={routeProps => {\n      return renderMergedProps(component, routeProps, rest);\n    }}/>\n  );\n}\n\nexport default PropsRoute\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport { EmitterProvider, Emitter } from 'react-emitter'\n\nimport MainPage from './pages/MainPage.js'\nimport StartPage from './pages/StartPage.js'\nimport ComparePage from './pages/ComparePage.js'\nimport PropsRoute from './scripts/RouterHelper'\n\nclass App extends React.Component {\n  state = {\n    post_object: [],\n    has_post: false\n  }\n\n  // Sets the JSON to be posted in the compare page\n  setPost = song => {\n    this.setState ({\n      post_object: song,\n      has_post: true\n    })\n  }\n\n\n  // Returns the post object and then clears it from the state\n  popPost = () => {\n    const tmp = this.state.post_object\n    this.setState({\n      post_object: [],\n      has_post: false\n    })\n    return tmp\n  }\n\n  // Checks if there is data available to be popped\n  hasPost = () => {\n    return this.state.has_post\n  }\n\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={StartPage} />\n        <PropsRoute path=\"/main\" component={MainPage} setPost ={this.setPost} />\n        <PropsRoute path=\"/compare\" component={ComparePage} popPost={this.popPost} hasPost={this.hasPost} />\n      </Switch>\n    )\n  }\n}\n\nconst EmitterApp = Emitter(( {emit} ) => {\n  return <App />;\n})\n\n\nexport default EmitterProvider(EmitterApp);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport EmitterApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender (\n    <BrowserRouter>\n      <EmitterApp />\n    </BrowserRouter>,\n    document.querySelector('#root')\n    )\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}